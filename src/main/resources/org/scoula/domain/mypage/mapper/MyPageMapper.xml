<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.scoula.domain.mypage.mapper.MyPageMapper">

    <!-- 계약서 목록 조회 -->
    <select id="selectContractsByUserId" resultType="org.scoula.domain.mypage.dto.MyPageContractDto">
        SELECT
            cc.contract_chat_id AS contractId,
            CONCAT(h.addr1, ' ', h.addr2) AS address,
            h.residence_type AS buildingType,
            cc.contract_start_at AS contractDate,
            fc.contract_pdf_url AS fileUrl,
            CASE 
                WHEN fc.contract_id IS NOT NULL THEN 'COMPLETED'
                ELSE cc.status
            END AS status,
            h.lease_type AS leaseType
        FROM contract_chat cc
                 JOIN home h ON cc.home_id = h.home_id
                 LEFT JOIN final_contract fc ON cc.contract_chat_id = fc.contract_id
        WHERE (cc.owner_id = #{userId} OR cc.buyer_id = #{userId})
        ORDER BY cc.contract_start_at DESC
            LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 계약서 총 개수 조회 -->
    <select id="countContractsByUserId" resultType="int">
        SELECT COUNT(*)
        FROM contract_chat cc
        WHERE (cc.owner_id = #{userId} OR cc.buyer_id = #{userId})
    </select>

    <!-- 매물 목록 조회 -->
    <select id="selectPropertiesByUserId" resultType="org.scoula.domain.mypage.dto.MyPagePropertyDto">
        SELECT
            h.home_id AS propertyId,
            CONCAT(h.addr1, ' ', h.addr2) AS address,
            h.residence_type AS buildingType,
            h.home_status AS status,
            h.view_cnt AS viewCount,
            h.like_cnt AS likeCount,
            (SELECT hi.image_url
             FROM home_image hi
             WHERE hi.home_id = h.home_id
             ORDER BY hi.image_id
                LIMIT 1) AS imageUrl,
            h.lease_type AS leaseType
        FROM home h
        WHERE h.user_id = #{userId}
        ORDER BY h.created_at DESC
            LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 매물 총 개수 조회 -->
    <select id="countPropertiesByUserId" resultType="int">
        SELECT COUNT(*)
        FROM home
        WHERE user_id = #{userId}
    </select>

    <!-- 사기위험도 분석 이력 조회 -->
    <select id="selectRiskAnalysesByUserId" resultType="org.scoula.domain.mypage.dto.MyPageRiskAnalysisDto">
        SELECT
            rc.riskck_id AS analysisId,
            CONCAT(h.addr1, ' ', h.addr2) AS address,
            h.residence_type AS buildingType,
            rc.checked_at AS analysisDate,
            rc.risk_type AS riskType,
            h.lease_type AS leaseType
        FROM risk_check rc
                 JOIN home h ON rc.home_id = h.home_id
        WHERE rc.user_id = #{userId}
        ORDER BY rc.checked_at DESC
            LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 사기위험도 분석 총 개수 조회 -->
    <select id="countRiskAnalysesByUserId" resultType="int">
        SELECT COUNT(*)
        FROM risk_check
        WHERE user_id = #{userId}
    </select>

    <!-- 사용자 정보 조회 -->
    <select id="selectUserInfoByUserId" resultType="org.scoula.domain.mypage.dto.MyPageUserInfoDto">
        SELECT
            u.user_id AS userId,
            u.email,
            u.nickname,
            u.profile_img_url AS profileImageUrl,
            COALESCE(u.notification_enabled, true) AS notificationEnabled
        FROM user u
        WHERE u.user_id = #{userId}
    </select>

    <!-- 닉네임 중복 체크 -->
    <select id="existsByNickname" resultType="boolean">
        SELECT EXISTS(
            SELECT 1
            FROM user
            WHERE nickname = #{nickname}
              AND user_id != #{userId}
        )
    </select>

    <!-- 프로필 이미지 업데이트 -->
    <update id="updateProfileImage">
        UPDATE user
        SET profile_img_url = #{imageUrl},
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 닉네임 업데이트 -->
    <update id="updateNickname">
        UPDATE user
        SET nickname = #{nickname},
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 알림 설정 업데이트 -->
    <update id="updateNotificationSetting">
        UPDATE user
        SET notification_enabled = #{enabled},
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

</mapper>