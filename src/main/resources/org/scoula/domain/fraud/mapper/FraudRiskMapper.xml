<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.domain.fraud.mapper.FraudRiskMapper">
    
    <!-- ========== RiskCheck 관련 쿼리 ========== -->
    
    <!-- 위험도 체크 정보 저장 -->
    <insert id="insertRiskCheck" parameterType="org.scoula.domain.fraud.vo.RiskCheckVO" 
            useGeneratedKeys="true" keyProperty="riskckId">
        INSERT INTO risk_check (
            user_id,
            home_id,
            risk_type,
            checked_at,
            registry_file_url,
            building_file_url,
            registry_file_date,
            building_file_date
        ) VALUES (
            #{userId},
            #{homeId},
            #{riskType},
            NOW(),
            #{registryFileUrl},
            #{buildingFileUrl},
            #{registryFileDate},
            #{buildingFileDate}
        )
    </insert>
    
    <!-- 위험도 체크 정보 수정 -->
    <update id="updateRiskCheck" parameterType="org.scoula.domain.fraud.vo.RiskCheckVO">
        UPDATE risk_check
        SET 
            risk_type = #{riskType},
            registry_file_url = #{registryFileUrl},
            building_file_url = #{buildingFileUrl},
            registry_file_date = #{registryFileDate},
            building_file_date = #{buildingFileDate}
        WHERE riskck_id = #{riskckId}
    </update>
    
    <!-- 위험도 체크 삭제 -->
    <delete id="deleteRiskCheck" parameterType="long">
        DELETE FROM risk_check
        WHERE riskck_id = #{riskckId}
    </delete>
    
    <!-- ========== RiskCheckDetail 관련 쿼리 ========== -->
    
    <!-- 위험도 체크 상세 정보 저장 -->
    <insert id="insertRiskCheckDetail" parameterType="org.scoula.domain.fraud.vo.RiskCheckDetailVO">
        INSERT INTO risk_check_detail (
            riskck_id,
            title1,
            title2,
            content
        ) VALUES (
            #{riskckId},
            #{title1},
            #{title2},
            #{content}
        )
    </insert>
    
    <!-- 위험도 체크 상세 정보 조회 (여러 개 반환) -->
    <select id="selectRiskCheckDetailByRiskCheckId" parameterType="long"
            resultType="org.scoula.domain.fraud.vo.RiskCheckDetailVO">
        SELECT 
            riskck_id AS riskckId,
            title1,
            title2,
            content
        FROM risk_check_detail
        WHERE riskck_id = #{riskckId}
        ORDER BY riskck_id
    </select>
    
    <!-- 위험도 체크 상세 정보 삭제 -->
    <delete id="deleteRiskCheckDetail" parameterType="long">
        DELETE FROM risk_check_detail
        WHERE riskck_id = #{riskckId}
    </delete>
    
    <!-- ========== 조회 관련 쿼리 ========== -->
    
    <!-- 사용자별 위험도 체크 목록 조회 -->
    <select id="selectRiskChecksByUserId" 
            resultType="org.scoula.domain.fraud.dto.response.RiskCheckListResponse">
        SELECT 
            rc.riskck_id AS riskCheckId,
            rc.checked_at AS checkedAt,
            h.addr1 AS address,
            h.addr2 AS detailAddress,
            CASE 
                WHEN h.residence_type = 'OPEN_ONE_ROOM' THEN '오픈형 원룸'
                WHEN h.residence_type = 'SEPARATED_ONE_ROOM' THEN '분리형 원룸'
                WHEN h.residence_type = 'TWO_ROOM' THEN '투룸'
                WHEN h.residence_type = 'OFFICETEL' THEN '오피스텔'
                WHEN h.residence_type = 'APARTMENT' THEN '아파트'
                WHEN h.residence_type = 'HOUSE' THEN '주택'
                ELSE h.residence_type
            END AS residenceType,
            (SELECT hi.image_url 
             FROM home_image hi 
             WHERE hi.home_id = rc.home_id 
             ORDER BY hi.image_id 
             LIMIT 1) AS imageUrl
        FROM risk_check rc
        JOIN home h ON rc.home_id = h.home_id
        WHERE rc.user_id = #{userId}
        ORDER BY 
        <choose>
            <when test="pageRequest.sort == 'checkedAt'">rc.checked_at</when>
            <when test="pageRequest.sort == 'riskType'">rc.risk_type</when>
            <when test="pageRequest.sort == 'homeId'">rc.home_id</when>
            <otherwise>rc.checked_at</otherwise>
        </choose>
        <choose>
            <when test="pageRequest.direction == 'ASC'">ASC</when>
            <otherwise>DESC</otherwise>
        </choose>
        LIMIT #{pageRequest.size} OFFSET #{pageRequest.offset}
    </select>
    
    <!-- 사용자별 위험도 체크 총 개수 -->
    <select id="countRiskChecksByUserId" parameterType="long" resultType="long">
        SELECT COUNT(*)
        FROM risk_check
        WHERE user_id = #{userId}
    </select>
    
    <!-- 위험도 체크 상세 정보 조회 (DTO 반환) -->
    <select id="selectRiskCheckDetailResponse" parameterType="long"
            resultType="org.scoula.domain.fraud.dto.response.RiskCheckDetailResponse">
        SELECT 
            rc.riskck_id AS riskCheckId,
            rc.user_id AS userId,
            rc.home_id AS homeId,
            rc.risk_type AS riskType,
            rc.checked_at AS checkedAt,
            rc.registry_file_url AS registryFileUrl,
            rc.building_file_url AS buildingFileUrl,
            h.addr1 AS address,
            h.addr2 AS detailAddress,
            CASE 
                WHEN h.residence_type = 'OPEN_ONE_ROOM' THEN '오픈형 원룸'
                WHEN h.residence_type = 'SEPARATED_ONE_ROOM' THEN '분리형 원룸'
                WHEN h.residence_type = 'TWO_ROOM' THEN '투룸'
                WHEN h.residence_type = 'OFFICETEL' THEN '오피스텔'
                WHEN h.residence_type = 'APARTMENT' THEN '아파트'
                WHEN h.residence_type = 'HOUSE' THEN '주택'
                ELSE h.residence_type
            END AS residenceType,
            (SELECT hi.image_url 
             FROM home_image hi 
             WHERE hi.home_id = rc.home_id 
             ORDER BY hi.image_id 
             LIMIT 1) AS imageUrl,
            h.lease_type AS leaseType,
            h.monthly_rent AS monthlyRent,
            h.deposit_price AS depositPrice,
            h.maintenance_fee AS managePrice,
            h.supply_area AS size,
            h.room_cnt AS roomNum,
            hd.bathroom_count AS toiletNum,
            hd.build_date AS completionDate
        FROM risk_check rc
        JOIN home h ON rc.home_id = h.home_id
        LEFT JOIN home_detail hd ON h.home_id = hd.home_id
        WHERE rc.riskck_id = #{riskckId}
    </select>
    
    <!-- ========== 유틸리티 쿼리 ========== -->
    
    <!-- 매물 존재 여부 확인 -->
    <select id="existsHome" parameterType="long" resultType="boolean">
        SELECT EXISTS(
            SELECT 1 
            FROM home 
            WHERE home_id = #{homeId}
        )
    </select>
    
    <!-- 사용자가 해당 risk check의 소유자인지 확인 -->
    <select id="isOwnerOfRiskCheck" resultType="boolean">
        SELECT EXISTS(
            SELECT 1
            FROM risk_check
            WHERE riskck_id = #{riskckId}
            AND user_id = #{userId}
        )
    </select>
    
    
</mapper>