name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

concurrency:
  group: deploy-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: false

env:
  JAVA_VERSION: '11'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'gradle'

    - name: Copy properties files
      run: |
        mkdir -p src/main/resources
        cp config-submodule/application.properties src/main/resources/
        cp config-submodule/application-default.properties src/main/resources/
        cp config-submodule/application-dev.properties src/main/resources/
        cp config-submodule/application-prod.properties src/main/resources/
        cp config-submodule/log4jdbc.log4j2.properties src/main/resources/

    - name: Build WAR
      run: ./gradlew build -x test --no-daemon

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Dev Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEV_SERVER_HOST }}
        username: ${{ secrets.DEV_SERVER_USER }}
        key: ${{ secrets.DEV_SERVER_SSH_KEY }}
        script: |
          set -e
          cd /opt/itzeep/backend
          
          # Pull latest code
          git fetch origin
          git reset --hard origin/main
          git submodule update --init --recursive
          
          # Update Docker image tag
          export NEW_IMAGE="${{ needs.build-and-push.outputs.image-tag }}"
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull new image
          docker pull ${NEW_IMAGE}
          
          # Create deployment .env if it doesn't exist
          if [ ! -f .env.dev ]; then
            echo "Error: .env.dev file not found"
            exit 1
          fi
          
          # Stop current containers
          docker-compose -f docker-compose.dev.yml --env-file .env.dev down
          
          # Start new containers
          docker-compose -f docker-compose.dev.yml --env-file .env.dev up -d
          
          # Wait for health check
          echo "Waiting for application to be healthy..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
              echo "Application is healthy!"
              break
            fi
            echo "Waiting for application to start... ($i/30)"
            sleep 10
          done
          
          # Verify deployment
          docker-compose -f docker-compose.dev.yml ps
          
          # Cleanup old images
          docker image prune -af --filter "until=24h"

    - name: Notify deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}';
          const environment = 'Development';
          const version = '${{ needs.build-and-push.outputs.version }}';
          const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
          
          const message = `${emoji} **${environment} Deployment ${status}**
          - Version: ${version}
          - Triggered by: @${{ github.actor }}
          - Commit: ${{ github.sha }}`;
          
          if (context.eventName === 'pull_request') {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: (startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USER }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        script: |
          set -e
          cd /opt/itzeep/backend
          
          # Backup current deployment
          BACKUP_DIR="/opt/itzeep/backups/$(date +%Y%m%d-%H%M%S)"
          mkdir -p ${BACKUP_DIR}
          docker-compose -f docker-compose.prod.yml ps > ${BACKUP_DIR}/deployment-status.log
          cp .env.prod ${BACKUP_DIR}/.env.prod.backup || true
          
          # Pull latest code
          git fetch origin --tags
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            git checkout ${{ github.ref_name }}
          else
            git reset --hard origin/main
          fi
          git submodule update --init --recursive
          
          # Update Docker image tag
          export NEW_IMAGE="${{ needs.build-and-push.outputs.image-tag }}"
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull new image
          docker pull ${NEW_IMAGE}
          
          # Create deployment .env if it doesn't exist
          if [ ! -f .env.prod ]; then
            echo "Error: .env.prod file not found"
            exit 1
          fi
          
          # Perform zero-downtime deployment
          echo "Starting zero-downtime deployment..."
          
          # Scale up new containers alongside old ones
          docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d --scale backend-prod=2 --no-recreate
          
          # Wait for new container to be healthy
          echo "Waiting for new container to be healthy..."
          sleep 60
          
          # Stop old container
          docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d --scale backend-prod=1 --no-recreate
          
          # Health check
          for i in {1..30}; do
            if curl -f https://api.itzeep.com/actuator/health 2>/dev/null; then
              echo "Application is healthy!"
              break
            fi
            echo "Waiting for application to be healthy... ($i/30)"
            sleep 10
          done
          
          # Verify deployment
          docker-compose -f docker-compose.prod.yml ps
          
          # Cleanup old images but keep backups
          docker image prune -af --filter "until=72h"

    - name: Create release notes
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/github-script@v7
      with:
        script: |
          const tag = '${{ github.ref_name }}';
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tag,
            name: `Release ${tag}`,
            body: `## üöÄ Production Deployment ${tag}
            
            ### Deployment Information
            - **Environment**: Production
            - **Deployed by**: @${{ github.actor }}
            - **Deployment time**: ${new Date().toISOString()}
            
            ### Changes
            See [commit history](https://github.com/${{ github.repository }}/compare/previous-tag...${tag}) for details.`,
            draft: false,
            prerelease: false
          });

  rollback:
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure')
    needs: [deploy-dev, deploy-prod]
    
    steps:
    - name: Determine environment
      id: env
      run: |
        if [[ "${{ needs.deploy-prod.result }}" == "failure" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
        fi

    - name: Trigger rollback
      run: |
        echo "‚ö†Ô∏è Deployment failed for ${{ steps.env.outputs.environment }}!"
        echo "Manual rollback may be required."
        # Add automated rollback logic here if needed

  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [build-and-push, deploy-dev, deploy-prod]
    
    steps:
    - name: Send Slack notification
      if: vars.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            attachments: [{
              color: '${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}',
              title: '${{ contains(needs.*.result, 'failure') && '‚ùå Deployment Failed' || '‚úÖ Deployment Successful' }}',
              fields: [
                {
                  title: 'Environment',
                  value: '${{ github.event.inputs.environment || 'auto' }}',
                  short: true
                },
                {
                  title: 'Version',
                  value: '${{ needs.build-and-push.outputs.version || github.sha }}',
                  short: true
                },
                {
                  title: 'Branch/Tag',
                  value: '${{ github.ref_name }}',
                  short: true
                },
                {
                  title: 'Triggered by',
                  value: '${{ github.actor }}',
                  short: true
                }
              ],
              footer: 'ITZeep Backend CD Pipeline',
              ts: '${{ github.event.head_commit.timestamp }}'
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}